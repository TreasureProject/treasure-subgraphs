enum Status {
  Started
  Ready
  Finished
}

enum ItemType {
  ERC20
  ERC1155
}

enum ItemEffect {
  Burn
  MoveToTreasury
  Custom
}

enum TreasureCategory {
  Alchemy
  Arcana
  Brewing
  Enchanting
  Leatherworking
  Smithing
}

type Config @entity {
  "Singleton"
  id: Bytes!

  "Latest global Randomizer request ID"
  cryptsRequestId: Bytes

  "Current round in progress"
  cryptsRound: Int!

  "True if round is still waiting for random seed to start"
  cryptsRoundStarting: Boolean!

  "Current round start time"
  cryptsRoundStartTime: BigInt!

  "Percentage of staked Legions that must reach temples before round advances"
  cryptsRoundAdvancePercentage: Int!

  "Number of seconds per epoch"
  cryptsSecondsInEpoch: BigInt!

  "Amount of time before a Legion squad can be unstaked, in seconds"
  cryptsLegionsUnstakeCooldown: BigInt!

  "Number of Legions playing Crypts"
  cryptsLegionsActive: Int!

  "Number of Legions that have reached a temple in the current round"
  cryptsLegionsReachedTemple: Int!

  "Maximum number of Legions to reach temple before the round advances"
  maxLegionsInCryptsTemple: Int!

  "Maximum number of Legion squads per user"
  maxCryptsSquadsPerUser: Int!

  "Maximum number of Legions on a single squad"
  maxLegionsPerCryptsSquad: Int!

  "Maximum number of map tiles a user can have in their hand"
  maxCryptsMapTilesInHand: Int!

  "Maximum number of map tiles a user can have on the board at once"
  maxCryptsMapTilesOnBoard: Int!

  "Minimum number of tiles away from temple a Legion squad must be placed on board"
  minimumDistanceFromTempleForCryptsLegionSquad: Int!

  "Amout of time, in seconds, a Legion has to craft Corruption after the Crypts round resets"
  cryptsCraftRoundResetTimeAllowance: Int!

  "Number of Malevolent Prisms required per Corruption craft"
  cryptsCraftMalevolentPrismsRequired: Int!

  "Minimum crafting level for an Auxiliary Legion to craft Corruption"
  cryptsCraftMinimumAuxLegionLevel: Int!
}

type Building @entity {
  id: Bytes!

  "Associated contract address"
  address: Bytes!

  "Corruption token mint rate"
  ratePerSecond: BigInt!

  "Corruption token mint rate boost"
  boost: BigInt!

  "Maximum Corruption token balance"
  generatedCorruptionCap: BigInt!

  "Associated Corruption removal recipes"
  recipes: [Recipe!]!
}

type Recipe @entity(immutable: true) {
  id: Bytes!

  recipeId: BigInt!
  corruptionRemoved: BigInt!
  items: [RecipeItem!]! @derivedFrom(field: "recipe")
}

type RecipeItem @entity(immutable: true) {
  id: Bytes!

  recipe: Recipe!

  address: Bytes
  type: ItemType!
  effect: ItemEffect!
  effectChance: BigInt!
  itemId: BigInt
  amount: BigInt
  customHandler: Bytes
  customRequirementData: Bytes
  treasureRequirement: RecipeItemTreasureRequirement @derivedFrom(field: "item")
  erc1155TokenSetRequirement: RecipeItemERC1155Requirement
    @derivedFrom(field: "item")
}

type RecipeItemTreasureRequirement @entity(immutable: true) {
  id: Bytes!

  item: RecipeItem!

  tier: Int!
  amount: Int!
}

type RecipeItemERC1155Requirement @entity(immutable: true) {
  id: Bytes!

  item: RecipeItem!

  collection: Bytes!
  tokenIds: [Int!]!
  amount: Int!
}

type Removal @entity {
  id: Bytes!

  requestId: BigInt!
  startTimestamp: BigInt!
  user: User!
  building: Building!
  recipe: Recipe!
  status: Status!
  corruptionRemoved: BigInt!
  prismMinted: BigInt
  brokenTreasureIds: [BigInt!]!
  brokenTreasureAmounts: [BigInt!]!
}

"Tracks related Randomizer commits"
type Seeded @entity {
  id: Bytes!

  "Requests related to this commit"
  requests: [Bytes!]!
}

type User @entity {
  id: Bytes!

  "Next time this user's Crypts cooldown expires, in seconds, if applicable"
  cryptsCooldownExpirationTime: BigInt

  removals: [Removal!]! @derivedFrom(field: "user")
  squads: [CryptsSquad!]! @derivedFrom(field: "user")
  mapTiles: [CryptsUserMapTile!]! @derivedFrom(field: "user")
}

type CryptsTemple @entity {
  id: Bytes!

  "Contract ID"
  templeId: Int!

  "Contract associated with temple, if any"
  address: Bytes

  "X coordinate on board"
  positionX: Int!

  "Y coordinate on board"
  positionY: Int!
}

type CryptsBoardTreasureFragment @entity {
  "Singleton"
  id: Bytes!

  "Treasure Fragment token ID"
  tokenId: Int!

  "X coordinate on board"
  positionX: Int!

  "Y coordinate on board"
  positionY: Int!

  "Number of Fragments already claimed this round"
  numClaimed: Int!

  "Maximum number of Fragments that can be claimed this round"
  maxSupply: Int!
}

type CryptsMapTile @entity(immutable: true) {
  id: Bytes!

  "Global map tile ID"
  mapTileType: Int!

  "Number of moves the tile enables"
  moves: Int!

  "True if tile has a move to the north"
  north: Boolean!

  "True if tile has a move to the east"
  east: Boolean!

  "True if tile has a move to the south"
  south: Boolean!

  "True if tile has a move to the west"
  west: Boolean!
}

type CryptsSquad @entity {
  id: Bytes!

  "Contract squad ID"
  squadId: BigInt!

  "Creator of this squad"
  user: User!

  "Characters in this squad"
  characters: [CryptsSquadCharacter!]!

  "Time squad was staked, in seconds"
  stakedTimestamp: BigInt!

  "Temple this squad is targeting"
  targetTemple: CryptsTemple!

  "Custom name for squad"
  name: String!

  "X coordinate on board, -1 if not placed"
  positionX: Int!

  "Y coordinate on board, -1 if not placed"
  positionY: Int!

  "Last round ID where this squad entered the target temple"
  lastRoundInTemple: Int!
}

type CryptsCharacterHandler @entity {
  id: Bytes!

  "Character NFT address"
  collection: Bytes!

  "Contract address for character handler"
  address: Bytes!
}

type CryptsSquadCharacter @entity(immutable: true) {
  id: Bytes!

  "Character NFT address"
  collection: Bytes!

  "Character NFT token ID"
  tokenId: Int!
}

type CryptsUserMapTile @entity {
  id: Bytes!

  "Contract ID"
  userMapTileId: BigInt!

  "Owner of the tile"
  user: User!

  "Associated map tile details"
  mapTile: CryptsMapTile!

  "X coordinate on board, -1 if not placed"
  positionX: Int!

  "Y coordinate on board, -1 if not placed"
  positionY: Int!

  "Block number for this tile's placement, if applicable"
  placedBlockNumber: BigInt

  "Log index for this tile's placement, if applicable"
  placedIndex: Int
}
