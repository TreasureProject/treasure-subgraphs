enum Category {
  Consumable
  Crystal
  Legion
  Treasure
  TreasureFragment
}

enum Difficulty {
  Easy
  Medium
  Hard
}

enum Status {
  Idle
  Revealable
  Revealed
  Finished
}

enum Size {
  Small
  Medium
  Large
}

enum Generation {
  Genesis
  Auxiliary
  Recruit
}

enum Rarity {
  Common
  Epic
  Legendary
  Rare
  Special
  Uncommon
  None
}

enum TreasureCategory {
  Alchemy
  Arcana
  Brewing
  Enchanting
  Leatherworking
  Smithing
}

interface Metadata {
  id: ID!
}

type _BlockConfig @entity {
  id: ID!

  "Block number at which the new Questing XP gained events were made available"
  questingXpGainedBlockNumber: BigInt
}

type Constellation @entity {
  id: ID!

  dark: Int!
  earth: Int!
  fire: Int!
  light: Int!
  water: Int!
  wind: Int!
}

type ConsumableInfo implements Metadata @entity {
  id: ID!

  type: String!
  size: Size
}

type LegionInfo implements Metadata @entity {
  id: ID!

  "Boost value when staked in Atlas Mine"
  boost: String!

  "Constellations tattooed to Legion"
  constellation: Constellation

  "Summoning cooldown time"
  cooldown: BigInt

  "Crafting Level"
  crafting: Int!

  "Crafting XP"
  craftingXp: Int!

  "Rank value when deposited in Harvester"
  harvestersRank: BigInt!

  "Weight value when deposited in Harvester"
  harvestersWeight: BigInt!

  "Questing Level"
  questing: Int!

  "Questing XP"
  questingXp: Int!

  "Rarity (Common, Rare, etc.)"
  rarity: String!

  "Class (Fighter, Ranger, etc.)"
  role: String!

  "Generation (Genesis, Auxiliary, Recruit)"
  type: String!

  "Number of summons already performed by Legion"
  summons: BigInt!
}

type TreasureInfo implements Metadata @entity {
  id: ID!

  boost: String!
  category: TreasureCategory!
  tier: Int!
}

type TreasureFragmentInfo implements Metadata @entity {
  id: ID!

  categories: [TreasureCategory!]!
  tier: Int!
}

type Approval @entity {
  id: ID!

  contract: Bytes!
  operator: Bytes!
  users: [UserApproval!]! @derivedFrom(field: "approval")
}

type AtlasMine @entity {
  id: ID!

  deposits: [Deposit!]! @derivedFrom(field: "mine")
  utilization: BigInt!
  withdrawals: [Withdraw!]! @derivedFrom(field: "mine")
}

type Deposit @entity {
  id: ID!

  "Hash for the deposit transaction"
  transactionHash: Bytes!

  "Associated `AtlasMine`, if applicable"
  mine: AtlasMine

  "Associated `Harvester`, if applicable"
  harvester: Harvester

  "Unique identifier for deposit"
  depositId: BigInt!

  "Amount of MAGIC deposited"
  amount: BigInt!

  "Deposit time, in milliseconds"
  startTimestamp: BigInt!

  "Unlock time, in milliseconds"
  endTimestamp: BigInt!

  "Initial lock period (0 = 2 Weeks, 1 = 1 Month, 2 = 3 Months, 3 = 6 Months, 4 = 12 Months"
  lock: Int!

  "`User` who initiated the deposit"
  user: User!

  "Associated `Withdraw`, if applicable"
  withdrawal: Withdraw
}

type Withdraw @entity {
  id: ID!

  amount: BigInt!
  deposit: Deposit!
  mine: AtlasMine
  harvester: Harvester
  user: User!
}

type Harvest @entity {
  id: ID!

  "Amount claimed"
  amount: BigInt!

  "Associated `AtlasMine`, if applicable"
  mine: AtlasMine

  "Associated `Harvester`, if applicable"
  harvester: Harvester

  "`User` who initiated the harvest"
  user: User!
}

type Random @entity {
  id: ID!

  "Set for crafting"
  craft: Craft
  "Set for questing"
  quest: Quest
  "Set for advanced questing"
  advancedQuest: AdvancedQuest
  "Set for summoning"
  summon: Summon

  requestId: BigInt!
  seeded: Seeded
}

type Seeded @entity {
  id: ID!

  randoms: [Random!]!
}

type Broken @entity {
  id: ID!

  outcome: Outcome!
  quantity: BigInt!
  token: Token!
}

type Outcome @entity {
  id: ID!

  broken: [Broken!]! @derivedFrom(field: "outcome")
  magicReturned: BigInt!
  rewardAmount: Int!
  reward: Token
  success: Boolean!
}

type Craft @entity {
  id: ID!

  difficulty: Difficulty!
  endTimestamp: BigInt!
  outcome: Outcome
  random: Random!
  status: Status!
  token: Token!
  user: User!
}

type MiniCraft @entity {
  id: ID!

  blockNumber: BigInt!
  timestamp: BigInt!
  tier: Int!
  token: Token!
  user: User!
  outcome: Outcome!
}

type Reward @entity {
  id: ID!

  crystalShards: Int!
  starlights: Int!
  treasure: Token
  universalLocks: Int!
}

type Quest @entity {
  id: ID!

  difficulty: Difficulty!
  endTimestamp: BigInt!
  random: Random!
  reward: Reward
  status: Status!
  token: Token!
  user: User!
}

type AdvancedQuest @entity {
  id: ID!

  requestId: BigInt!
  random: Random!
  status: Status!
  zoneName: String!
  part: Int!
  endTimestamp: BigInt!
  stasisHitCount: Int!
  hadStasisPart2: Boolean!
  hadStasisPart3: Boolean!
  treasures: [TokenQuantity!]!
  treasureTriadResult: TreasureTriadResult
  rewards: [AdvancedQuestReward!]! @derivedFrom(field: "advancedQuest")
  token: Token!
  user: User!
}

type AdvancedQuestReward @entity {
  id: ID!

  advancedQuest: AdvancedQuest!
  consumable: TokenQuantity
  treasureFragment: Token
  treasure: Token
}

type TreasureTriadResult @entity {
  id: ID!

  advancedQuest: AdvancedQuest!
  playerWon: Boolean!
  numberOfCardsFlipped: Int!
  numberOfCorruptedCardsRemaining: Int!
}

type TreasureTriadCardInfo @entity {
  id: ID!

  token: Token!
  north: Int!
  east: Int!
  south: Int!
  west: Int!
}

type StakedToken @entity {
  id: ID!

  "User who owns the Token"
  user: User!

  "Generic Token that was staked"
  token: Token!

  "Atlas Min this token was staked to, if applicable"
  mine: AtlasMine

  "Harvester this token was staked to, if applicable"
  harvester: Harvester

  "Quantity of Token that was staked"
  quantity: BigInt!

  "Order of the staked token, if applicable"
  index: Int

  "Timestamp, in seconds, when the effects of this staked token expire, if applicable"
  expirationTime: BigInt
}

type Summon @entity {
  id: ID!

  endTimestamp: BigInt
  prismUsed: Token
  random: Random!
  resultToken: Token
  status: Status!
  success: Boolean
  token: Token!
  user: User!
}

type SummoningCircle @entity {
  id: ID!

  crafters: Int!
  summoners: Int!
  successRate: String!
}

# Holds data to clear summon fatigue
type _SummonFatigue @entity {
  id: ID!

  data: [String!]!
  timestamp: BigInt!
}

type Token @entity {
  id: ID!

  category: Category
  contract: Bytes!
  "0 = Genesis, 1 = Auxiliary, 2 = Recruit"
  generation: Int
  image: String!
  imageAlt: String
  metadata: Metadata
  name: String!
  owners: [UserToken!]! @derivedFrom(field: "token")
  rarity: Rarity!
  tokenId: BigInt!

  "Boosts for when token is added to a Harvester"
  harvesterBoosts: [HarvesterTokenBoost!] @derivedFrom(field: "token")
}

type User @entity {
  id: ID!

  approvals: [UserApproval!]! @derivedFrom(field: "user")
  crafts: [Craft!]! @derivedFrom(field: "user")
  miniCrafts: [MiniCraft!]! @derivedFrom(field: "user")
  deposits: [Deposit!]! @derivedFrom(field: "user")
  pilgrimaging: [Pilgrimage!] @derivedFrom(field: "user")
  quests: [Quest!]! @derivedFrom(field: "user")
  advancedQuests: [AdvancedQuest!]! @derivedFrom(field: "user")
  staked: [StakedToken!]! @derivedFrom(field: "user")
  tokens: [UserToken!]! @derivedFrom(field: "user")
  summons: [Summon!]! @derivedFrom(field: "user")
  withdrawals: [Withdraw!]! @derivedFrom(field: "user")

  boost: String!
  boosts: Int!
  deposited: BigInt!
  recruit: Token
  finishedAdvancedQuestCount: Int!
}

type Pilgrimage @entity {
  id: ID!

  endTimestamp: BigInt!
  pilgrimageId: BigInt!
  quantity: BigInt!
  token: Token!
  user: User!
}

type UserApproval @entity {
  id: ID!

  approval: Approval!
  user: User!
}

type UserToken @entity {
  id: ID!

  quantity: BigInt!
  token: Token!
  user: User!
}

type TokenQuantity @entity {
  id: ID!

  quantity: Int!
  token: Token!
}

type Harvester @entity {
  id: ID!

  "Block when this Harvester was deployed"
  deployedBlockNumber: BigInt!

  "Associated NftHandler that will be used for staking to Harvester"
  nftHandler: HarvesterNftHandler! @derivedFrom(field: "harvester")

  "Maximum amount of MAGIC that can be staked"
  maxMagicDeposited: BigInt!

  "Maximum number of Harvester Parts that can be staked"
  maxPartsStaked: Int!

  "Maximum number of Harvester Parts that can be staked to this Harvester by a single `User`"
  maxPartsStakedPerUser: Int!

  "Maximum number of Extractors that can be staked"
  maxExtractorsStaked: Int!

  "Maximum number of Legions that can be staked"
  maxLegionsStaked: Int!

  "Maximum weight of Legions that can be staked to this Harvester by a single `User`"
  maxLegionsWeightPerUser: BigInt!

  "Maximum number of Treasures that can be staked to this Harvester by a single `User`"
  maxTreasuresStakedPerUser: Int!

  "Amount of MAGIC allocated for deposits with the staking of each Harvester Part"
  magicDepositAllocationPerPart: BigInt!

  "Amount of MAGIC deposited to this Harvester"
  magicDeposited: BigInt!

  "Number of Harvester Parts staked to this Harvester"
  partsStaked: Int!

  "Number of Extractors staked to this Harvester"
  extractorsStaked: Int!

  "Time, in seconds, that an extractor is active when staked"
  extractorsLifetime: BigInt!

  "Number of Legions staked to this Harvester"
  legionsStaked: Int!

  "Configurable boost factor for Harvester Parts"
  partsBoostFactor: BigInt!

  "Boost value of staked Harvester Parts (1 + ((2n - n^2/maxParts)/maxParts) * partsBoostFactor)"
  partsBoost: BigInt!

  "Boost value of staked Extractors (1 + Boost1 + Boost2 + ... BoostN)"
  extractorsBoost: BigInt!

  "Total rank value of Legions staked to this Harvester"
  legionsTotalRank: BigInt!

  "Boost value of staked Legions (1 + ((2n - n^2/maxLegions)/maxLegions) * legionsRankBoost)"
  legionsBoost: BigInt!

  "Boost values for tokens when added to this Harvester"
  tokenBoosts: [HarvesterTokenBoost!]! @derivedFrom(field: "harvester")

  "All tokens staked to this Harvester"
  stakedTokens: [StakedToken!]! @derivedFrom(field: "harvester")

  "All MAGIC deposit records to this Harvester"
  magicDeposits: [Deposit!]! @derivedFrom(field: "harvester")

  "All MAGIC withdrawal records from this Harvester"
  magicWithdrawals: [Withdraw!]! @derivedFrom(field: "harvester")

  "All MAGIC rewards harvest records from this Harvester"
  magicHarvests: [Harvest!]! @derivedFrom(field: "harvester")
}

type HarvesterNftHandler @entity {
  id: ID!

  "Harvester associated with this NftHandler"
  harvester: Harvester!
}

type HarvesterStakingRule @entity {
  id: ID!

  "Harvester associated with this StakingRule"
  harvester: Harvester!
}

type HarvesterTokenBoost @entity {
  id: ID!

  "Harvester associated with this boost"
  harvester: Harvester!

  "Token associated with this boost"
  token: Token!

  "Boost value of the token when added to the associated Harvester"
  boost: BigInt!
}
