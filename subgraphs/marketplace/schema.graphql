enum Status {
  Active
  Inactive
  Sold
}

enum TokenStandard {
  ERC721
  ERC1155
}

type Collection @entity {
  id: ID!

  contract: String!
  floorPrice: BigInt!
  listings: [Listing!]!
  name: String!
  tokens: [Token!]! @derivedFrom(field: "collection")
  standard: TokenStandard!

  totalListings: Int!
  totalSales: BigInt!
  totalVolume: BigInt!
}

type Listing @entity {
  id: ID!

  # "Track originally listed quantity, needed when staking Treasures"
  # _listedQuantity: BigInt!

  blockTimestamp: BigInt!
  buyer: User
  # contract: String!
  collection: Collection!
  # collectionName: String!
  expires: BigInt!

  # "Used to support multiple filters with metadata attributes"
  # filters: [String!]

  # nicePrice: String
  pricePerItem: BigInt!
  quantity: Int!
  seller: User!
  status: Status!
  token: Token!
  # tokenName: String
  # totalPrice: String

  # Sold listing
  transactionLink: String
}

type Token @entity {
  id: ID!

  collection: Collection!
  # contract: String!
  "For ERC1155s, but is it needed?"
  floorPrice: BigInt
  listings: [Listing!] @derivedFrom(field: "token")
  name: String
  owners: [UserToken!]! @derivedFrom(field: "token")
  tokenId: BigInt!
}

type User @entity {
  id: ID!

  listings: [Listing!]! @derivedFrom(field: "seller")
  purchases: [Listing!]! @derivedFrom(field: "buyer")
  tokens: [UserToken!]! @derivedFrom(field: "user")
  staked: [StakedToken!]! @derivedFrom(field: "user")
}

type UserToken @entity {
  id: ID!

  quantity: Int!
  token: Token!
  user: User!
}

type StakedToken @entity {
  id: ID!

  quantity: Int!
  token: Token!
  user: User!
}
