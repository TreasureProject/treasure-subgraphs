enum TokenType {
  SmolBrains
  SmolBodies
  SmolCars
  Swolercycles
}

enum RaceStatus {
  "Race has started but rewards are not claimable yet"
  Started

  "Rewards are claimable upon race completion"
  Claimable

  "Race has finished"
  Stopped
}

"Tracks related Randomizer requests"
type Random @entity {
  id: ID!

  "Race related to this request"
  race: Race
}

"Tracks related Randomizer commits"
type Seeded @entity {
  id: ID!

  "Random requests related to this commit"
  randoms: [Random!]!
}

"NFTs that participate in Smol Racing"
type Token @entity {
  id: ID!

  "Display name of token contract"
  type: TokenType!

  "Token contract address"
  contract: Bytes!

  "Token ID"
  tokenId: BigInt!

  "True if token is staked in Smol Racing contract"
  isStaked: Boolean!

  "User that initiated the stake, if applicable"
  stakingUser: Bytes
}

"NFTs that participate as drivers in Smol Racing"
type Driver @entity {
  id: ID!

  race: Race!
  token: Token!
}

"Smol Racing instance"
type Race @entity {
  id: ID!

  "User that initiated the race"
  user: Bytes!

  "Race start time, in seconds"
  startTime: BigInt!

  "Race end time, in seconds"
  endTime: BigInt

  "Number of races performed in this instance"
  numRaces: Int!

  "Current status of this race"
  status: RaceStatus!

  "Vehicle NFT participating in this race"
  vehicle: Token!

  "Driver NFTs participating in this race"
  drivers: [Driver!]! @derivedFrom(field: "race")

  "Rewards claimed from this race"
  rewards: [Reward!]! @derivedFrom(field: "race")
}

"Mapping of vehicles to current races"
type VehicleRace @entity {
  id: ID!

  "Vehicle NFT participating in a race"
  vehicle: Token!

  "Current race for this vehicle, if applicable"
  race: Race
}

"Rewards claimed from races"
type Reward @entity {
  id: ID!

  "Related race for this reward claim"
  race: Race!

  "Claim start time, in seconds"
  timestamp: BigInt!

  "Token contract address, if applicable"
  contract: Bytes

  "Token ID, if applicable"
  tokenId: BigInt

  "Number of this token earned (0 for no reward)"
  amount: BigInt!
}
